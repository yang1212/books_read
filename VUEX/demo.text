1 什么是vuex?
 Vuex是一个专为Vue.js应用程序开发的状态管理模式。
 采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。

2 应用场景
  vuex只能用于单个页面中不同组件（例如兄弟组件）的数据流通

3 优点缺点


4 核心内容
  （1）modules
     为了便于日后的维护 , 我们分开写更好 , 我们在 src 目录下 ,新建一个 store 文件夹 ,
     

  （2）mutations 
     对vuex 的依赖仅仅只有一个 $store.state.dialog.show 一个状态 , 但是如果我们要进行一个操作 , 
     需要依赖很多很多个状态 , 那管理起来又麻烦了
     注意点：
     1 mutations 中的方法是不分组件的 , 假如你在 dialog_stroe.js 文件中的定义了
     switch_dialog 方法 , 在其他文件中的一个 switch_dialog 方法 , 那么
     $store.commit('switch_dialog') 会执行所有的 switch_dialog 方法。

     2 mutations里的操作必须是同步的。
    
  （3）actions
     多个 state 的操作 , 使用 mutations 会来触发会比较好维护 , 
     那么需要执行多个 mutations 就需要用 action 了
     export default {
        state:{//state
            show:false
        },
        mutations:{
            switch_dialog(state){//这里的state对应着上面这个state
                state.show = state.show?false:true;
                //你还可以在这里执行其他的操作改变state
            }
        },
        actions:{
            switch_dialog(context){//这里的context和我们使用的$store拥有相同的对象和方法
                context.commit('switch_dialog');
                //你还可以在这里触发其他的mutations方法
            },
        }
    
    使用 $store.dispatch('switch_dialog') 来触发 action 中的 switch_dialog 方法。

    官方推荐 , 将异步操作放在 action 中。
   （3）getters
       getters 和 vue 中的 computed 类似 , 都是用来计算 state 然后生成新的数据 ( 状态 ) 的

       假如我们需要一个与状态 show 刚好相反的状态 , 使用 vue 中的 computed 可以这样算出来,
       如果很多很多个组件中都需要用到这个与 show 刚好相反的状态 , 那么我们需要写很多很多个 not_show ,
       使用 getters 就可以解决这种问题 :

    (4) mapState、mapGetters、mapActions
      很多时候 , $store.state.dialog.show 、$store.dispatch('switch_dialog') 这种写法又长又臭 , 
      很不方便 , 我们没使用 vuex 的时候 , 获取一个状态只需要 this.show , 
      执行一个方法只需要 this.switch_dialog 就行了 , 使用 vuex 使写法变复杂   
      以 mapState 为例 :

<template>
  <el-dialog :visible.sync="show"></el-dialog>
</template>

<script>
import {mapState} from 'vuex';
export default {
  computed:{

    //这里的三点叫做 : 扩展运算符
    ...mapState({
      show:state=>state.dialog.show
    }),
  }
}
</script>
相当于 :

<template>
  <el-dialog :visible.sync="show"></el-dialog>
</template>

<script>
import {mapState} from 'vuex';
export default {
  computed:{
    show(){
        return this.$store.state.dialog.show;
    }
  }
}
</script>
mapGetters、mapActions 和 mapState 类似 , mapGetters 一般也写在 computed 中 , 
mapActions 一般写在 methods

注意点：
由于 store 中的状态是响应式的，在组件中调用 store 中的状态简单到仅需要在计算属性中返回即可。
触发变化也仅仅是在组件的 methods 中提交 mutation